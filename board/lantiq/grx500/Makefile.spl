include $(srctree)/config.mk
include $(srctree)/arch/$(ARCH)/Makefile

BOARDDIR := $(VENDOR)/$(BOARD)
TOPDIR := $(srctree)

ifeq ($(CONFIG_GRX500_A21),y)
    BCH_ENCODER := $(TOPDIR)/board/$(BOARD)/bch_enc_a21.c
else
    BCH_ENCODER := $(TOPDIR)/board/$(BOARD)/bch_enc_a11.c
endif

ifeq ($(CONFIG_GRX500_A21),y)
	GPHYFW_AXX := $(TOPDIR)/board/$(BOARD)/gphy_firmware_a21.img
else
	GPHYFW_AXX := $(TOPDIR)/board/$(BOARD)/gphy_firmware_a11.img
endif

ifdef CONFIG_GRX500_DDR3
DDR_TYPE := 3
else
DDR_TYPE := 2
endif

ifeq ($(CONFIG_GRX500_400M_CL6),y)
    DDR_GRADE := 1
else ifeq ($(CONFIG_GRX500_533M_CL6),y)
    DDR_GRADE := 2
else ifeq ($(CONFIG_GRX500_533M_CL7),y)
    DDR_GRADE := 3
else ifeq ($(CONFIG_GRX500_533M_CL8),y)
    DDR_GRADE := 4
else ifeq ($(CONFIG_GRX500_667M_CL8),y)
    DDR_GRADE := 5
else ifeq ($(CONFIG_GRX500_667M_CL9),y)
    DDR_GRADE := 6
else ifeq ($(CONFIG_GRX500_667M_CL10),y)
    DDR_GRADE := 7
else ifeq ($(CONFIG_GRX500_800M_CL9),y)
    DDR_GRADE := 8
else ifeq ($(CONFIG_GRX500_800M_CL10),y)
    DDR_GRADE := 9
else ifeq ($(CONFIG_GRX500_800M_CL11),y)
    DDR_GRADE := 10
else
    $(Unsupported DDR Grade, please recheck selected settings)   
endif

ifeq ($(CONFIG_GRX500_32Mx16),y)
    DDR_DENSITY := 2
else ifeq ($(CONFIG_GRX500_64Mx8),y)
    DDR_DENSITY := 3
else ifeq ($(CONFIG_GRX500_64Mx16),y)
    DDR_DENSITY := 4
else ifeq ($(CONFIG_GRX500_128Mx8),y)
    DDR_DENSITY := 5
else ifeq ($(CONFIG_GRX500_667M_CL9),y)
    DDR_GRADE := 6
else ifeq ($(CONFIG_GRX500_667M_CL10),y)
    DDR_GRADE := 7
else ifeq ($(CONFIG_GRX500_800M_CL9),y)
    DDR_GRADE := 8
else ifeq ($(CONFIG_GRX500_800M_CL10),y)
    DDR_GRADE := 9
else ifeq ($(CONFIG_GRX500_800M_CL11),y)
    DDR_GRADE := 10
else
    $(Unsupported DDR Grade, please recheck selected settings)   
endif

ifeq ($(CONFIG_GRX500_32Mx16),y)
    DDR_DENSITY := 2
else ifeq ($(CONFIG_GRX500_64Mx8),y)
    DDR_DENSITY := 3
else ifeq ($(CONFIG_GRX500_64Mx16),y)
    DDR_DENSITY := 4
else ifeq ($(CONFIG_GRX500_128Mx8),y)
    DDR_DENSITY := 5
else ifeq ($(CONFIG_GRX500_128Mx16),y)
    DDR_DENSITY := 6
else ifeq ($(CONFIG_GRX500_256Mx8),y)
    DDR_DENSITY := 7
else ifeq ($(CONFIG_GRX500_256Mx16),y)
    DDR_DENSITY := 8
else ifeq ($(CONFIG_GRX500_512Mx8),y)
    DDR_DENSITY := 9
else ifeq ($(CONFIG_GRX500_512Mx16),y)
    DDR_DENSITY := 10
else 
   $(Unsupported DDR Density, please recheck selected settings)
endif

ifeq ($(CONFIG_GRX500_CPU_600M),y)
    CPU_SPEED := 3
else ifeq ($(CONFIG_GRX500_CPU_800M),y)
    CPU_SPEED := 2
else ifeq ($(CONFIG_GRX500_CPU_1000M),y)
    CPU_SPEED := 16
else ifeq ($(CONFIG_GRX500_CPU_1200M),y)
    CPU_SPEED := 1
else
    $(Unsupported CPU Speed, please recheck selected settings)
endif

ifeq ($(CONFIG_GRX500_DDR_CTRL_200M),y)
    DDR_CTRL_SPEED := 7
else ifeq ($(CONFIG_GRX500_DDR_CTRL_333M),y)
    DDR_CTRL_SPEED := 5
else ifeq ($(CONFIG_GRX500_DDR_CTRL_400M),y)
    DDR_CTRL_SPEED := 4
else
    $(Unsupported DDR Controller settings, please recheck selected settings)
endif

ifdef CONFIG_GRX500_MIPS_ENDIAN_BE
MIPS_ENDIAN := 1
else
MIPS_ENDIAN := 0
endif

ifeq ($(CONFIG_GRX500_CBM_FREQ_200M),y)
	CBM_FREQ := 8
else ifeq ($(CONFIG_GRX500_CBM_FREQ_300M),y)
	CBM_FREQ := 6
else ifeq ($(CONFIG_GRX500_CBM_FREQ_400M),y)
	CBM_FREQ := 5
else ifeq ($(CONFIG_GRX500_CBM_FREQ_480M),y)
	CBM_FREQ := 4
else ifeq ($(CONFIG_GRX500_CBM_FREQ_600M),y)
	CBM_FREQ := 3
else ifeq ($(CONFIG_GRX500_CBM_FREQ_800M),y)
	CBM_FREQ := 2
else ifeq ($(CONFIG_GRX500_CBM_FREQ_1200M),y)
	CBM_FREQ := 1
else ifeq ($(CONFIG_GRX500_CBM_FREQ_2400M),y)
	CBM_FREQ := 0
else
    $(Unsupported CBM freq settings, please recheck selected settings)
endif

ifeq ($(CONFIG_GRX500_BL8),y)
	BL := 8
else ifeq ($(CONFIG_GRX500_BC4),y)
	BL := 4
else
	BL := 8	
endif

ifeq ($(CONFIG_GRX500_CS0_ONLY),y)
	CS := 1
else
	CS := 2
endif

##### end grx500 ddr configurations

ifdef CONFIG_GRX500_GPHY_FW_EMBEDDED
    GPHY_FIRMWARE = $(TOPDIR)/board/$(BOARDDIR)/gphy_firmware.img
else
    GPHY_FIRMWARE = $(TOPDIR)/dummy
endif

ALL-y += $(obj)/u-boot.lzimg $(obj)/u-boot.ltq $(ENV_BLOCK)
ALL-y += $(obj)/u-boot-nand.bin
ALL-y = $(obj)/u-boot-spl-16k.bin

LDSCRIPT_BOOTSTRAP := $(TOPDIR)/board/$(BOARDDIR)/bootstrap.lds
SFDDR_START_ADDR := $(CONFIG_NAND_SPL_TEXT_BASE)

ifdef CONFIG_NAND_BENAND
BCH_VAL = 0
else
BCH_VAL = 8
endif

OBJS_BOOTSTRAP  = $(TOPDIR)/lib/string.o $(TOPDIR)/lib/ctype.o
OBJS_BOOTSTRAP  += $(TOPDIR)/arch/$(ARCH)/mach-lantiq/$(BOARD)/start_uncomp.o
LIBS_BOOTSTRAP  = $(TOPDIR)/lib_bootstrap/libbootstrap.a
LIBS_BOOTSTRAP += $(TOPDIR)/lib/crc32.o
BOOTSTRAP_LDFLAGS = -Bstatic -T $(LDSCRIPT_BOOTSTRAP) -Ttext $(CONFIG_BOOTSTRAP_TEXT_BASE)

# create u-boot.ltq
$(obj)/u-boot.ltq: System.map $(obj)/bootstrap.bin $(obj)/u-boot.lzimg ddr.conf 
		@cp -f $(BCH_ENCODER) $(TOPDIR)/board/$(BOARDDIR)/bch_enc.c
		@$(TOPDIR)/scripts_platform/pad2align.sh -n 10240 $(obj)/bootstrap.bin
		@cat $(obj)/bootstrap.bin > u-boot.ltq
		@cat $(obj)/u-boot.lzimg >> u-boot.ltq
ifdef CONFIG_GRX500_GPHY_FW_EMBEDDED
		@cp u-boot.bin u-boot-gphy.bin
		@$(TOPDIR)/scripts_platform/pad2align.sh -n 0x40000 u-boot-gphy.bin
		@$(TOPDIR)/scripts_platform/pad2align.sh -n 65536 u-boot.ltq
		@cp $(GPHYFW_AXX) $(GPHY_FIRMWARE)
		@cat $(GPHY_FIRMWARE) >>u-boot.ltq	
endif

# create u-boot-nand.bin
$(obj)/u-boot-nand.bin: u-boot.ltq spl/u-boot-spl-16k.bin
	cp spl/u-boot-spl-16k.bin u-boot-nand.bin
	cat u-boot.ltq >> u-boot-nand.bin

# create u-boot-spl-16k.bin
APPDIR := $(srctree)/board/$(VENDOR)/$(BOARD)
$(obj)/u-boot-spl-16k.bin: ddr.conf $(obj)/u-boot-spl.bin FORCE
	$(srctree)/scripts_platform/mk_ltq_header.pl $(spinandflag-y) --ddr board/$(VENDOR)/$(BOARD)/ddr.conf \
			--bch $(BCH_VAL) --col 2 --row 3 --blocksize $(CONFIG_NAND_BLOCK_SIZE) --pagesize $(CONFIG_NAND_PAGE_SIZE) \
			--offset $(CONFIG_NAND_PAGE_SIZE) --out board/$(VENDOR)/$(BOARD)/header.ltq
	$(srctree)/scripts_platform/pad2align.sh -n 1760 board/$(VENDOR)/$(BOARD)/header.ltq
	$(HOSTCC) -o board/$(VENDOR)/$(BOARD)/bch_enc board/$(VENDOR)/$(BOARD)/bch_enc.c
	$(APPDIR)/bch_enc board/$(VENDOR)/$(BOARD)/header.ltq board/$(VENDOR)/$(BOARD)/header.bch $(CONFIG_GRX500_ROM_HEADER_BCH_CAP)
	$(srctree)/scripts_platform/pad2align.sh -n $(CONFIG_NAND_PAGE_SIZE) board/$(VENDOR)/$(BOARD)/header.bch
	$(srctree)/scripts_platform/mk_sf_image.pl -i $(obj)/u-boot-spl.bin -o board/$(VENDOR)/$(BOARD)/output.bin -j $(CONFIG_NAND_SPL_TEXT_BASE) -m 0
	$(srctree)/scripts_platform/pad2align.sh -n 440 board/$(VENDOR)/$(BOARD)/output.bin
ifdef CONFIG_NAND_BENAND
	cp board/$(VENDOR)/$(BOARD)/header.bch $(obj)/u-boot-spl-16k.bin
	cat board/$(VENDOR)/$(BOARD)/output.bin >> $(obj)/u-boot-spl-16k.bin
else
	$(APPDIR)/bch_enc board/$(VENDOR)/$(BOARD)/output.bin board/$(VENDOR)/$(BOARD)/output.bch 8
	cp board/$(VENDOR)/$(BOARD)/header.bch $(obj)/u-boot-spl-16k.bin
	cat board/$(VENDOR)/$(BOARD)/output.bch >> $(obj)/u-boot-spl-16k.bin
endif
	$(srctree)/scripts_platform/pad2align.sh -n $(CONFIG_NAND_SPL_BLOCK_SIZE) $(obj)/u-boot-spl-16k.bin

# generate ddr.conf
ddr.conf:
	@rm -rf $(srctree)/board/$(BOARDDIR)/ddr.conf
ifeq ($(CONFIG_GRX500_USE_DDR_PRECONFIG),y)
	@cp $(CONFIG_GRX500_DDR_CONFIG_FILE) $(srctree)/board/$(BOARDDIR)/ddr.conf
else
	@rm -f $(srctree)/board/$(BOARDDIR)/init_ddr
	@gcc -o $(srctree)/board/$(BOARDDIR)/init_ddr $(srctree)/board/$(BOARDDIR)/init_ddr.c
	@$(srctree)/board/$(BOARDDIR)/init_ddr -type $(DDR_TYPE) -grade $(DDR_GRADE) -density $(DDR_DENSITY) \
 		-rank $(CS) -bl $(BL) -al $(CONFIG_GRX500_ADDITIVE_LATENCY) -endian $(MIPS_ENDIAN) \
		-sr0 $(CONFIG_GRX500_1ST_SR0_VALUE) $(CONFIG_GRX500_2ND_SR0_VALUE) \
		-sr1 $(CONFIG_GRX500_1ST_SR1_VALUE) $(CONFIG_GRX500_2ND_SR1_VALUE) \
		-fcps $(CPU_SPEED) -fsl 8 -fngi 6 -fcbm $(CBM_FREQ) -fcps2 1 -fdctl $(DDR_CTRL_SPEED) \
		-fgsw 5 -fgswr 6 -o $(srctree)/board/$(BOARDDIR)/ddr.conf
endif

# create bootstrap.bin
$(obj)/bootstrap.bin: $(obj)/bootstrap
		$(OBJCOPY) ${OBJCFLAGS} -O binary $< $@

# create bootstrap map
$(obj)/bootstrap: $(LIBS_BOOTSTRAP) $(OBJS_BOOTSTRAP) $(LDSCRIPT_BOOTSTRAP)
		$(LD) $(BOOTSTRAP_LDFLAGS) $$UNDEF_SYM $(OBJS_BOOTSTRAP) $(LIBS_BOOTSTRAP) \
                -Map bootstrap.map -o $(obj)/bootstrap

$(LIBS_BOOTSTRAP):
	$(Q)$(MAKE) -f lib_bootstrap/Makefile all

# creae u-boot lzma
$(obj)/u-boot.lzimg: u-boot.bin System.map
		lzma e u-boot.bin u-boot.lzma
		scripts_platform/pad2align.sh -n 16 u-boot.lzma
		$(srctree)/tools/mkimage -A mips -T firmware -C lzma \
		-a 0x$(shell grep "T _start" $(TOPDIR)/System.map | awk '{ printf "%s", $$1 }') \
		-e 0x$(shell grep "T _start" $(TOPDIR)/System.map | awk '{ printf "%s", $$1 }') \
		-n 'u-boot image' -d u-boot.lzma $@

$(ENV_BLOCK): $(obj)/u-boot $(obj)/u-boot.bin
		$(NM) -Ss u-boot >u-boot.sym
		scripts_platform/mk_envimg.sh $@

